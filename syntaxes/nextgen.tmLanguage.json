{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "NextGen",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#template-code"
		}
	],
	"repository": {
		"strings": {
			"name": "string.quoted.double.nextgen",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.nextgen",
					"match": "\\\\."
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.nextgen",
					"match": "\\b(String|Boolean|Decimal)\\b"
				}
			]
		},
		"template-code": {
			"name": "storage.type.nextgen",
			"begin": "(?x)\n(?!^)@",
			"end": "@",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#do-statement"
				},
				{
					"include": "#loop-statement"
				},
				{
					"include": "#return-statement"
				},
				{
					"include": "#comment-line"
				},
				{
					"include": "#variable-declaration"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#endfunction-statement"
				},
				{
					"include": "#empty-statement"
				},
				{
					"include": "#variable-assignment"
				},
				{
					"include": "#if-statement"
				},
				{
					"include": "#elseif-statement"
				},
				{
					"include": "#else-statement"
				},
				{
					"include": "#endif-statement"
				},
				{
					"include": "#error-statement"
				},
				{
					"include": "#function-call"
				}
			]
		},
		"if-statement": {
			"begin": "^(@)\\s*(If)\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.conditional.if.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"endif-statement": {
			"begin": "(?x)\n^(@)\\s*(EndIf)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.conditional.if.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"else-statement": {
			"begin": "(?x)\n^(@)\\s*(Else)\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.conditional.else.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"elseif-statement": {
			"begin": "(?x)\n^(@)\\s*(ElseIf)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"return-statement": {
			"begin": "(?x)\n^(@)\\s*(Return)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"do-statement": {
			"begin": "(?x)\n^(@)\\s*(Do)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#comment"
				}
			]
		},
		"loop-statement": {
			"begin": "(?x)\n^(@)\\s*(Loop)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"variable": {
			"match": "\\b([_[:alpha:]][_[:alnum:]]*)\\b",
			"captures": {
				"1": {
					"name": "entity.name.variable.nextgen"
				}
			}
		},
		"function-declaration": {
			"begin": "(?x)\n^(@)\\s*(Function)\\s+([_[:alpha:]]+)\\s+([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				},
				"3": {
					"name": "storage.type.nextgen",
					"patterns": [
						{
							"include": "#storage"
						},
						{
							"match": "(Void|String|Decimal|Boolean)"
						}
					]
				},
				"4": {
					"name": "entity.name.function.nextgen",
					"patterns": [
						{
							"match": "[_[:alpha:]][_[:alnum:]]*"
						}
					]
				}
			},
			"end": "(--.*)?$",
			"endCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#parameter-list"
				}
			]
		},
		"endfunction-statement": {
			"begin": "(?x)\n^(@)\\s*(EndFunction)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"parameter-list": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.nextgen"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.nextgen"
				}
			},
			"patterns": [
				{
					"include": "#parameter-declaration"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-declaration": {
			"match": "\\s*([[:alpha:]]+)\\s+([_[:alpha:]][_[:alnum:]]*\\b)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#storage"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#variable"
						}
					]
				}
			}
		},
		"variable-declaration": {
			"begin": "(?x)\n^(@)\\s*(Var)\\s+([[:alpha:]]+)\\s+([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				},
				"3": {
					"patterns": [
						{
							"include": "#storage"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#variable"
						}
					]
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#variable-initializer"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=|>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.compound.nextgen"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"variable-assignment": {
			"begin": "(?x)\n^(@)\\s*([_[:alpha:]][_[:alnum:]]*)\\s*(\\*=|/=|%=|\\+=|-=|\\&=|\\^=|<<=|>>=|\\|=|=)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"patterns": [
						{
							"include": "#variable"
						}
					]
				},
				"3": {
					"name": "keyword.operator.assignment.compound.nextgen"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#interpolated-string"
				},
				{
					"include": "#verbatim-interpolated-string"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#invocation-expression"
				},
				{
					"include": "#member-access-expression"
				},
				{
					"include": "#element-access-expression"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#parenthesized-expression"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"parenthesized-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.nextgen"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.nextgen"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"identifier": {
			"name": "variable.other.readwrite.nextgen",
			"match": "@?[_[:alpha:]][_[:alnum:]]*"
		},
		"assignment-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.nextgen",
					"match": "\\*=|/=|%=|\\+=|-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.cs",
					"match": "\\&=|\\^=|<<=|>>=|\\|="
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.shift.cs",
					"match": "<<|>>"
				},
				{
					"name": "keyword.operator.comparison.cs",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.relational.cs",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.cs",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.cs",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.cs",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.cs",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.cs",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.cs",
					"match": "%|\\*|/|-|\\+"
				},
				{
					"name": "keyword.operator.null-coalescing.cs",
					"match": "\\?\\?"
				}
			]
		},
		"invocation-expression": {
			"patterns": [
				{
					"begin": "(?x)\n([_[:alpha:]][_[:alnum:]]*)\\s*      # method name\n(?=\\()  # open paren of argument list",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.nextgen"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#argument-list"
						}
					]
				}
			]
		},
		"function-call": {
			"begin": "(?x)\n^(@)\\s*([_[:alpha:]][_[:alnum:]]*)\\s*      # method name\n(?=\\()  # open paren of argument list",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "entity.name.function.nextgen"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"argument-list": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.nextgen"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.nextgen"
				}
			},
			"patterns": [
				{
					"include": "#argument"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"argument": {
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.nextgen",
			"match": ","
		},
		"comment": {
			"match": "(?x)\n(\\s*--.*)(?:$)",
			"captures": {
				"1": {
					"name": "comment.line.double-dash.nextgen"
				}
			}
		},
		"comment-line": {
			"match": "^(@)\\s*(--.*)$",
			"captures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "comment.line.double-dash.nextgen"
				}
			}
		},
		"error-statement": {
			"begin": "(?x)\n^(@)\\s*(Error)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.nextgen"
				},
				"2": {
					"name": "keyword.control.nextgen"
				}
			},
			"end": "(?:$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"empty-statement": {
			"match": "^(@)\\s*$",
			"captures": {
				"1": {
					"name": "storage.type.nextgen"
				}
			}
		},
		"operator": {
			"name": "keyword.operator.nextgen",
			"match": "\\b(+=|-=|*=|/=|*|/|+|-|==|~~)\\b"
		},
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#char-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#verbatim-string-literal"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.nextgen",
					"match": "(?<!\\.)\\bTrue\\b"
				},
				{
					"name": "constant.language.boolean.false.nextgen",
					"match": "(?<!\\.)\\bFalse\\b"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.integer.nextgen",
					"match": "(?<!\\.)\\b([0-9_]+)+\\b"
				}
			]
		},
		"string-literal": {
			"name": "string.quoted.double.cs",
			"begin": "(?<!@)\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.cs"
				},
				"2": {
					"name": "invalid.illegal.newline.cs"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.cs",
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})"
		}
	},
	"scopeName": "source.nextgen"
}